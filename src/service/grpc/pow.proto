syntax = "proto3";
package proto;
option go_package = "bct.com/prox_powd/api/pow_pb";

message PutObjectMKRequest {
 string key = 1;

 string cid = 2;
 int64 size = 3;
}
message PowHeader {
 string peerId =1;
 string Id = 2;
}
message PutObjectMKReq {
 PowHeader header = 1;
 PutObjectMKRequest request = 2;
}
message PutObjectMKOpt{
 oneof Option{
  PutObjectMKReq req = 1;
  bytes chunk = 2;
 }
}
message PutObjectMKResp {
 string md5 = 1;
 string cid = 2;
 string root = 3;
 int64 blocks = 4;
}
message CliGetMerkleRequest{
 string  id = 1;
 string cid = 2;
 int64 idx = 3;
}
message CliMerkleInfo{
 bytes rootBytes = 1;
 string root = 2;
 int32  blocks = 3;
 bytes  normalRoot = 4;
 int64  totalBlocks= 5;
}
message CliGetMerkleReply{
 CliMerkleInfo root = 1;
 CliMerkleInfo cidRoot = 2;
}
message GetMerkleProofResp{
 repeated bytes proofs = 1;
 bytes data=2;
 bytes hash = 3;
 bytes key = 4;
 int64 idx = 5;
 bytes chash = 6;
 bytes ckey = 7;
 int64 cidx = 8;
}
message GetIDRequest {
 string id = 1;
 int32 tid = 2;
 uint64 typ = 3;
}
message GetIDResponse {
 string id = 1;
 string fogId = 2;
}
message MerkleIDRequest{
 string id = 1;
 string cid =2;
 int64 idx = 3;
}
message NormalMerkleBlocks {
 string id = 1;
 int64 idx=2;
}
service PowService {
 rpc GetMerkleRoot(CliGetMerkleRequest)returns(CliGetMerkleReply){}
 rpc GetMerkleProof(CliGetMerkleRequest)returns(GetMerkleProofResp){}
 rpc BuildMerkelLeaf(stream PutObjectMKOpt)returns(PutObjectMKResp){}
 rpc GetID(GetIDRequest)returns(GetIDResponse){}
 rpc GetMerkleID(MerkleIDRequest)returns(NormalMerkleBlocks){}
}